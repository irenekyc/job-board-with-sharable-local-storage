{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { SET_JOBRES, FETCHERROR, INIT_NEW_SEARCH, SET_PAGE } from './types';\nexport var newSearch = function newSearch() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: INIT_NEW_SEARCH\n              });\n              dispatch({\n                type: SET_PAGE,\n                payload: 1\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var getData = function getData(searchQuery, locationQuery) {\n  var page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return axios.get(\"https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?title=\".concat(searchQuery, \"&location=\").concat(locationQuery, \"&page=\").concat(page));\n\n            case 2:\n              res = _context2.sent;\n\n              try {\n                dispatch({\n                  type: SET_JOBRES,\n                  payload: res.data\n                });\n              } catch (error) {\n                dispatch({\n                  type: FETCHERROR,\n                  payload: error\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var getLatestJob = function getLatestJob(page) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios.get(\"https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?page=\".concat(page));\n\n            case 2:\n              res = _context3.sent;\n\n              try {\n                dispatch({\n                  type: SET_JOBRES,\n                  payload: res.data\n                });\n              } catch (error) {\n                dispatch({\n                  type: FETCHERROR,\n                  payload: error\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":null,"metadata":{},"sourceType":"module"}