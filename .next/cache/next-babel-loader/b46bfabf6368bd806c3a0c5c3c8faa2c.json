{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { SET_JOBRES, FETCHERROR, INIT_NEW_SEARCH, SET_PAGE } from './types';\nexport var newSearch = function newSearch() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch({\n                type: INIT_NEW_SEARCH\n              });\n              dispatch({\n                type: SET_PAGE,\n                payload: 1\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var getData = function getData(searchQuery, locationQuery) {\n  var page = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return axios.get(\"https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?search=\".concat(searchQuery, \"&location=\").concat(locationQuery, \"&page=\").concat(page));\n\n            case 2:\n              res = _context2.sent;\n\n              try {\n                dispatch({\n                  type: SET_JOBRES,\n                  payload: res.data\n                });\n              } catch (error) {\n                dispatch({\n                  type: FETCHERROR,\n                  payload: error\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var getLatestJob = function getLatestJob(page) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios.get(\"https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?page=\".concat(page));\n\n            case 2:\n              res = _context3.sent;\n\n              try {\n                dispatch({\n                  type: SET_JOBRES,\n                  payload: res.data\n                });\n              } catch (error) {\n                dispatch({\n                  type: FETCHERROR,\n                  payload: error\n                });\n              }\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/Users/irenechow/Desktop/job-board/src/store/actions/jobs.js"],"names":["axios","SET_JOBRES","FETCHERROR","INIT_NEW_SEARCH","SET_PAGE","newSearch","dispatch","type","payload","getData","searchQuery","locationQuery","page","get","res","data","error","getLatestJob"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,eAAjC,EAAkDC,QAAlD,QAAkE,SAAlE;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA,wEAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAC3BA,cAAAA,QAAQ,CAAC;AACLC,gBAAAA,IAAI,EAAEJ;AADD,eAAD,CAAR;AAGAG,cAAAA,QAAQ,CAAC;AACLC,gBAAAA,IAAI,EAAEH,QADD;AAELI,gBAAAA,OAAO,EAAE;AAFJ,eAAD,CAAR;;AAJ2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAN;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAlB;AAUP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,WAAD,EAAcC,aAAd;AAAA,MAA6BC,IAA7B,uEAAoC,CAApC;AAAA;AAAA,yEAA0C,kBAAMN,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAC3CN,KAAK,CAACa,GAAN,6FAA+FH,WAA/F,uBAAuHC,aAAvH,mBAA6IC,IAA7I,EAD2C;;AAAA;AACvDE,cAAAA,GADuD;;AAG7D,kBAAI;AAEAR,gBAAAA,QAAQ,CAAC;AACLC,kBAAAA,IAAI,EAAEN,UADD;AAELO,kBAAAA,OAAO,EAAEM,GAAG,CAACC;AAFR,iBAAD,CAAR;AAKH,eAPD,CAQA,OAAOC,KAAP,EAAc;AACVV,gBAAAA,QAAQ,CAAC;AACLC,kBAAAA,IAAI,EAAEL,UADD;AAELM,kBAAAA,OAAO,EAAEQ;AAFJ,iBAAD,CAAR;AAIH;;AAhB4D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1C;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;AAoBP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACL,IAAD;AAAA;AAAA,yEAAU,kBAAMN,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAChBN,KAAK,CAACa,GAAN,2FAA6FD,IAA7F,EADgB;;AAAA;AAC5BE,cAAAA,GAD4B;;AAElC,kBAAI;AACAR,gBAAAA,QAAQ,CAAC;AACLC,kBAAAA,IAAI,EAAEN,UADD;AAELO,kBAAAA,OAAO,EAAEM,GAAG,CAACC;AAFR,iBAAD,CAAR;AAKH,eAND,CAOA,OAAOC,KAAP,EAAc;AACVV,gBAAAA,QAAQ,CAAC;AACLC,kBAAAA,IAAI,EAAEL,UADD;AAELM,kBAAAA,OAAO,EAAEQ;AAFJ,iBAAD,CAAR;AAIH;;AAdiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB","sourcesContent":["import axios from 'axios'\nimport { SET_JOBRES, FETCHERROR, INIT_NEW_SEARCH, SET_PAGE } from './types'\n\nexport const newSearch = () => async dispatch => {\n    dispatch({\n        type: INIT_NEW_SEARCH,\n    })\n    dispatch({\n        type: SET_PAGE,\n        payload: 1,\n    })\n\n}\nexport const getData = (searchQuery, locationQuery, page = 1) => async dispatch => {\n    const res = await axios.get(`https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?search=${searchQuery}&location=${locationQuery}&page=${page}`)\n\n    try {\n\n        dispatch({\n            type: SET_JOBRES,\n            payload: res.data\n        })\n\n    }\n    catch (error) {\n        dispatch({\n            type: FETCHERROR,\n            payload: error\n        })\n    }\n}\n\n\nexport const getLatestJob = (page) => async dispatch => {\n    const res = await axios.get(`https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json?page=${page}`);\n    try {\n        dispatch({\n            type: SET_JOBRES,\n            payload: res.data\n        })\n\n    }\n    catch (error) {\n        dispatch({\n            type: FETCHERROR,\n            payload: error\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}